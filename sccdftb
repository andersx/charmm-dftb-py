#!/usr/bin/python
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>

import os
import shutil

from sccdftb_config import SCRATCH_DIR, CHARMM_EXE, PARTOP, SLKO_DIR, ZETA, HUBBARD
from sccdftb_api import *

if __name__ == "__main__":

    args = get_args()

    # print args

    # create scrdir
    scr_dir = generate_scr_name()
    # scr_dir = "/home/andersx/scr/temp"
    try:
        os.mkdir(scr_dir)
    except:
        pass

    # create molecule.crd

    ixyz_file = args.ixyz
    crd_file = scr_dir + "/molecule.crd"

    f = open(ixyz_file, "r")
    ixyz_lines = f.readlines()
    f.close()

    atom_count = generate_atom_dict()

    total_atoms_count = int(ixyz_lines[0])

    crd_output  = "*  Molecule input for CHARMM\n"
    crd_output += "*  Generated by sccdftb\n"
    crd_output += "*\n""" 
    crd_output += "%5i" % (total_atoms_count) 

    for i, line in enumerate(ixyz_lines[2:]):

        tokens = line.split()

        if len(tokens) < 4:
            break

        atom_type = tokens[0].upper()
        x = float(tokens[1])
        y = float(tokens[2])
        z = float(tokens[3])

        atom_count[atom_type] += 1

        crd_string = "\n %4i    1 DFTB %1s%-2i %10.5f %9.5f %9.5f SOLV 1      0.00000" % (i + 1,  atom_type, atom_count[atom_type], x, y, z)

        crd_output += crd_string

    f = open(crd_file, "w")
    for line in crd_output:
        f.write(line)
    f.close()


    # create molecule.rtf

    rtf_file = scr_dir + "/molecule.rtf"
    
    rtf_output  = "DEFA FIRS NONE LAST NONE\n"
    rtf_output += "AUTO ANGLES DIHE\n"
    rtf_output += "\n"
    rtf_output += "RESI DFTB        0.00\n"
    rtf_output += "GROUP\n"

    for atom in ATOMS:
        n = atom_count[atom]
        if n == 0:
            continue
        for i in range(n):
            rtf_output += "ATOM %1s%-3i  %1s     0.00\n" % (atom, i+1, atom)
 

    f = open(rtf_file, "w")
    for line in rtf_output:
        f.write(line)
    f.close()

    # print rtf_file

    # create geometry.inp

    inp_output  = "* DFTB input for CHARMM\n"
    inp_output += "*\n"
    inp_output += "\n"
    inp_output += "bomb -5\n"
    inp_output += "wrnlev -5\n"
    inp_output += "set partop %s\n" % PARTOP
    inp_output += "\n"
    inp_output += "!Read topology\n"
    inp_output += "open read card unit 10 name @partop/top_all27_prot_na.rtf\n"
    inp_output += "read rtf card unit 10\n"
    inp_output += "close unit 10\n"
    inp_output += "\n"
    inp_output += "!read parameters\n"
    inp_output += "open read card unit 10 name @partop/par_all27_prot_na.prm\n"
    inp_output += "read param card unit 10\n"
    inp_output += "close unit 10\n"
#    inp_output += "\n"
#    inp_output += "read rtf card append name @partop/top_all36_cgenff.rtf\n"
#    inp_output += "read para card append name @partop/par_all36_cgenff.prm\n"
    inp_output += "\n"
    inp_output += "read rtf card append name %s\n" % rtf_file
    inp_output += "\n"
    inp_output += "read sequence dftb 1\n"
    inp_output += "generate dftb setup noangle nodihedral\n"
    inp_output += "\n"
    inp_output += "open read unit 10 card name %s\n" % crd_file
    inp_output += "read coor unit 10 card append\n"
    inp_output += "close unit 10\n"
    inp_output += "\n"
    if args.clean_up is not True:
        inp_output += "open unit 3 name %s write form\n" % (scr_dir + "/molecule_charmm.psf")
        inp_output += "write psf card unit 3\n"
        inp_output += "\n"
        inp_output += "open unit 3 name %s write form\n" % (scr_dir + "/molecule_charmm.crd")
        inp_output += "write coor card unit 3\n"
        inp_output += "\n"
#    inp_output += "nbonds  atom fshift cdie vdw vshift  -\n"
#    inp_output += "       cutnb 14.0 ctofnb 12.0 ctonnb 10.0 wmin 1.5 eps 1.0 -\n"
#    inp_output += "       inbfrq -1\n"
#    inp_output += "\n"
    inp_output += "define qm sele all end\n"
    inp_output += "\n"

    i = 0
    for atom in ATOMS:
        n = atom_count[atom]
        if n == 0:
            continue
        i += 1

        inp_output += "scalar wmain set %i.0 sele (qm) .and. type %s*  end\n" % (i, atom)

    inp_output += "\n"

    charge = 0.0
    if args.charge is not None:
        charge = float(args.charge)
    
    dispersion_correction = ""

    if args.d2 is not None:
        dispersion_correction = "twobod"

    if args.d3 is not None:
        dispersion_correction = "threebod"

    cpe_correction = ""

    if args.cpe is not None:
        cpe_correction = "cpe"

    scf_tol = "1.0e-7"
    if args.scf_tol is not None:
       scf_tol = args.scf_tol 

    inp_output += "sccdftb remove sele qm end temp 0.0 scftol " +  str(scf_tol) + " -\n"
    inp_output += "        chrg %2.1f d3rd hbon mixe 3 %s %s\n" % (charge, cpe_correction, dispersion_correction)


    if args.minimize == True:

        inp_output += "\n"
        inp_output += "mini powe nstep 1000\n"
        inp_output += "\n"

    crd_opt = scr_dir + "/molecule_optimized.crd"

    if args.oxyz is not None:
        
        inp_output += "\n"
        inp_output += "open unit 3 name %s write form\n" % crd_opt
        inp_output += "write coor card unit 3\n"
        inp_output += "\n"

    inp_output += "energy\n"
    inp_output += "\n"
    inp_output += "stop\n"
    inp_output += "\n"
    # print inp_output

    inp_file = scr_dir + "/calculation.inp"

    
    f = open(inp_file, "w")
    for line in inp_output:
        f.write(line)
    f.close()


    # write sccdftb.dat file

    dat_file = scr_dir + "/sccdftb.dat"

    dat_output = ""
    for atom1 in ATOMS:
        for atom2 in ATOMS:
            if atom_count[atom1] > 0 and atom_count[atom2] > 0:

                dat_output += "'%s/%s%s.spl'\n" % (SLKO_DIR, atom1.lower(), atom2.lower())

    for atom in ATOMS:
        if atom_count[atom] > 0:
            dat_output += "'%s' %1.5f\n" % (atom.lower(), HUBBARD[atom])

    dat_output += str(ZETA)

    f = open(dat_file, "w")
    for line in dat_output:
        f.write(line)
    f.close()

    # print dat_output

    # run charmm

    work_dir = os.getcwd()

    os.chdir(scr_dir)

    if args.verbose:
        os.system(CHARMM_EXE + " < " + inp_file + " 2>&1 | tee output.log")
    else:
        os.system(CHARMM_EXE + " < " + inp_file + " > output.log")

    os.chdir(work_dir)
    
    f = open(scr_dir + "/output.log")
    output_lines = f.readlines()
    f.close()

    energy = 0.0
    dipole = 0.0

    for line in output_lines:
        if "ENER QUANTM>" in line:
            energy = float(line.split()[2])

        if "Dipol: |mu| =" in line:
            dipole = float(line.split()[3])

    # Print resulting energy, dipole
    print "E = %15.5f kcal/mol    |mu| = %10.5f Debye" % (energy, dipole)

    # generate+copy output xyz
    if args.oxyz is not None:
        os.system("crd2xyz %s > %s " % (crd_opt, args.oxyz))

    if args.clean_up:
        shutil.rmtree(scr_dir)

